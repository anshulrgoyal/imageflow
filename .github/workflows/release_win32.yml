name: Release Win32

on:
  release:
    types:
      - published

jobs:
  build:
    runs-on: windows-2019
    steps:
      - name: Checkout code
        uses: actions/checkout@master
      - uses: FranzDiebold/github-env-vars-action@v1.3.0
      - name: Install nasm
        run: choco install nasm
      - name: Install nasm
        run: |
          curl -L -o nasminst.exe https://argoyal.s3.us-east-2.amazonaws.com/nasm-2.14.02-installer-x64.exe
          .\nasminst.exe /S
        if: ${{failure()}}

      - name: Set Path
        run: |
          echo "C:\Program Files\NASM" >> $GITHUB_PATH
          echo "C:\Program Files (x86)\NASM" >> $GITHUB_PATH
        shell: bash

      - name: Cache cargo
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-windows-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install latest 32bit target
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy
          target: i686-pc-windows-msvc
      - name: Test Build
        run: cargo test --all --release --target=i686-pc-windows-msvc
      - name: Build Release
        run: cargo build --all --release --target=i686-pc-windows-msvc
        shell: bash
        env:
          ESTIMATED_ARTIFACT_URL: https://s3-us-west-1.amazonaws.com/imageflow-nightlies/imageflow-${{env.GITHUB_REF_NAME}}-${{env.GITHUB_SHA_SHORT}}-${{env.PACKAGE_SUFFIX}}.zip
          ESTIMATED_DOCS_URL: https://s3-us-west-1.amazonaws.com/imageflow-nightlies/doc
          CI_SEQUENTIAL_BUILD_NUMBER: ${{github.run_number}}
          CI_BUILD_URL: https://github.com/${{env.GITHUB_REPOSITORY_OWNER}}/${{env.GITHUB_REPOSITORY_NAME}}/actions/runs/${{github.run_id}}
          CI_JOB_URL: https://github.com/${{env.GITHUB_REPOSITORY_OWNER}}/${{env.GITHUB_REPOSITORY_NAME}}/actions/runs/${{github.run_id}}
          CI_JOB_TITLE: Github ${{github.job_id}}
          CI_STRING: Github actions
          CI_PULL_REQUEST_INFO: ${{github.event_name!='release'}}
          CI_TAG: ${{env.GITHUB_REF_NAME}}
          CI_REPO: ${{env.GITHUB_REPOSITORY_OWNER}}/${{env.GITHUB_REPOSITORY_NAME}}
          CI: True
          OPT_LEVEL: 0
          DEBUG: False
          PROFILE: release
          FETCH_COMMIT_SUFFIX: win-x86

      - name: Build Docs
        run: cargo doc --all --release --no-deps --target=i686-pc-windows-msvc

      - name: Create Artifacts Header
        shell: bash
        run: |
          mkdir -p ./artifacts/staging/headers || true
          (
            cd ./${TARGET_DIR}doc
            7z a -r "../docs.zip" ./*
          )
          mv ./${TARGET_DIR}docs.zip ./artifacts/staging/

          cp -R ./${TARGET_DIR}release/{imageflow_,libimageflow}*  ./artifacts/staging/
          cp -R "./${TARGET_DIR}release/imageflow.dll" ./artifacts/staging/imageflow.dll
          cp -R "./${TARGET_DIR}release/imageflow.pdb" ./artifacts/staging/imageflow.pdb
          cp bindings/headers/*.h  ./artifacts/staging/headers/
          cp bindings/headers/imageflow_default.h  ./artifacts/staging/imageflow.h
          rm ./artifacts/staging/*.{o,d,rlib} || true
          rm ./artifacts/staging/*-* || true
          (
            cd ./artifacts/staging
            7z a -r "./archive.zip" ./*
          )
          mkdir -p "./artifacts/upload/$(dirname "${ARTIFACT_UPLOAD_PATH}")" || true
          cp "${ARTIFACT_ARCHIVE_NAME}" "./artifacts/upload/${ARTIFACT_UPLOAD_PATH}.zip"
          mkdir -p "./artifacts/upload/${DOCS_UPLOAD_DIR}" || true
          mkdir -p ./artifacts/upload/releases
          mkdir -p ./artifacts/upload/commits/${GIT_COMMIT}
          cp "${ARTIFACT_ARCHIVE_NAME}" "./artifacts/upload/releases/${ARTIFACT_UPLOAD_PATH}.zip"
          cp "${ARTIFACT_ARCHIVE_NAME}" "./artifacts/upload/commits/${GIT_COMMIT}/${ARTIFACT_UPLOAD_PATH_1}.zip"
          TARGET_DIR: target/i686-pc-windows-msvc/
          ARTIFACT_UPLOAD_PATH: /imageflow-${{env.GITHUB_REF_NAME}}-${{env.GITHUB_SHA_SHORT}}-win-x86
          ARTIFACT_ARCHIVE_NAME: ./artifacts/staging/archive.zip
          DOCS_UPLOAD_DIR}: doc
          GIT_COMMIT: ${{github.sha}}
          ARTIFACT_UPLOAD_PATH_1: /win-x86

      - name: Nuget(Tool) to S3
        shell: bash
        run: ./ci/pack_nuget/pack.sh tool
        env:
          CI_TAG: ${{env.GITHUB_REF_NAME}}
          PACKAGE_SUFFIX: win-x86
          NUGET_RUNTIME: win-x86
          TARGET_DIR: target/i686-pc-windows-msvc

      - name: Nuget(Runtime) to S3
        shell: bash
        run: ./ci/pack_nuget/pack.sh
        env:
          CI_TAG: ${{env.GITHUB_REF_NAME}}
          PACKAGE_SUFFIX: win-x86
          NUGET_RUNTIME: win-x86
          TARGET_DIR: target/i686-pc-windows-msvc

      - name: Upload to release
        uses: Shopify/upload-to-release@master
        with:
          name: imageflow-${{env.GITHUB_REF_NAME}}-${{env.GITHUB_SHA_SHORT}}-win-x86.zip
          path: ./artifacts/upload/imageflow-${{env.GITHUB_REF_NAME}}-${{env.GITHUB_SHA_SHORT}}-win-x86.zip
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          content-type: text/plain
      - name: Upload to S3
        uses: shallwefootball/s3-upload-action@master
        with:
          aws_key_id: ${{ secrets.AWS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
          aws_bucket: ${{ secrets.AWS_BUCKET }}
          source_dir: ./artifacts/upload/
          destination_dir: ''
      - name: Upload to S3
        uses: shallwefootball/s3-upload-action@master
        with:
          aws_key_id: ${{ secrets.AWS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
          aws_bucket: ${{ secrets.AWS_BUCKET }}
          source_dir: ./artifacts/nuget/
          destination_dir: 'nuget'
      - name: Publish nuget
        run: |
          for f in ./artifacts/nuget/*.nupkg
          do
            curl -vX PUT -u "anshulrgoyal:${{ secrets.GITHUB_TOKEN }}" -F package=@$f https://nuget.pkg.github.com/anshulrgoyal/
          done
        shell: bash
